import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// CORS headers for browser access
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-use-queue',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
}

// Standard response headers for all responses (includes CORS)
const responseHeaders = { 
  ...corsHeaders, 
  'Content-Type': 'application/json' 
};

// Maximum number of queries to process directly in this function
// Prevents timeouts by limiting work
const MAX_DIRECT_PROCESS_QUERIES = 2;

serve(async (req) => {
  console.log('Custom analysis request received');
  
  // Handle CORS preflight requests - respond immediately
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders
    });
  }

  try {
    // Verify authentication
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: authHeader },
        },
        auth: {
          persistSession: false
        }
      }
    );

    // Get user
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    if (userError || !user) {
      throw new Error('Unauthorized');
    }

    // Parse request body
    const requestJson = await req.json().catch(err => {
      console.error('Error parsing request JSON:', err);
      throw new Error('Invalid JSON in request body');
    });
    
    const { client_id, platform, queries } = requestJson;
    console.log('Request data:', { client_id, platform, queryCount: queries?.length });

    // Validate required fields
    if (!client_id) throw new Error('Missing client_id');
    if (!platform) throw new Error('Missing platform');
    if (!Array.isArray(queries)) throw new Error('Queries must be an array');

    // Filter only selected queries
    const selectedQueries = queries.filter(q => q.selected);
    
    if (selectedQueries.length === 0) {
      throw new Error('No queries selected');
    }

    // Get client
    const { data: client } = await supabaseClient
      .from('clients')
      .select('*')
      .eq('id', client_id)
      .single();

    if (!client) {
      throw new Error('Client not found or unauthorized');
    }

    // Verify client ownership (checking both created_by and user_id columns)
    if (client.created_by !== user.id && client.user_id !== user.id) {
      throw new Error('Unauthorized: You do not own this client');
    }

    // Get competitors from separate table
    const { data: competitors } = await supabaseClient
      .from('competitors')
      .select('*')
      .eq('client_id', client_id);
    
    // Format competitors with pattern field
    const formattedCompetitors = (competitors || []).map(comp => ({
      name: comp.name,
      domain: comp.domain,
      pattern: comp.name.toLowerCase()
    }));

    // Create service client for faster operations
    const serviceClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      {
        auth: {
          persistSession: false
        }
      }
    );

    // Calculate total queries
    const platformCount = platform === 'both' ? 2 : 1;
    const queries_total = selectedQueries.length * platformCount;
    
    // Extract keywords and intents
    const keywords = [...new Set(selectedQueries.map(q => q.keyword).filter(k => k))];
    const intents = [...new Set(selectedQueries.map(q => q.intent).filter(i => i))];

    // Create analysis run
    const batch_id = `custom_${platform}_${Date.now()}`;
    const { data: analysisRun, error: runError } = await serviceClient
      .from('analysis_runs')
      .insert({
        client_id,
        batch_id,
        platform,
        status: 'pending',
        intents,
        keywords,
        queries_total,
        queries_completed: 0,
        test_mode: false,
        created_by: user.id,
        competitors: formattedCompetitors // Store competitors with the run
      })
      .select()
      .single();

    if (runError) {
      throw new Error(`Failed to create analysis run: ${runError.message}`);
    }

    console.log('Created analysis run:', analysisRun.id);

    // Split queries into initial batch and queue batches
    const initialBatch = selectedQueries.slice(0, MAX_DIRECT_PROCESS_QUERIES);
    const queueBatch = selectedQueries.slice(MAX_DIRECT_PROCESS_QUERIES);

    console.log(`Processing ${initialBatch.length} queries directly and queuing ${queueBatch.length} for background processing`);

    // Process the initial batch directly
    if (initialBatch.length > 0) {
      // Process each selected query in the initial batch
      for (const query of initialBatch) {
        if (platform === 'both') {
          // Process for both platforms
          try {
            // Process for ChatGPT
            await processQuery(
              analysisRun.id,
              query.query_text,
              query.keyword,
              query.intent,
              'chatgpt',
              client,
              formattedCompetitors,
              serviceClient
            );
            
            // Process for Perplexity
            await processQuery(
              analysisRun.id,
              query.query_text,
              query.keyword,
              query.intent,
              'perplexity',
              client,
              formattedCompetitors,
              serviceClient
            );
          } catch (error) {
            console.error(`Error processing query "${query.query_text}":`, error);
          }
        } else {
          // Process for single platform
          try {
            await processQuery(
              analysisRun.id,
              query.query_text,
              query.keyword,
              query.intent,
              platform,
              client,
              formattedCompetitors,
              serviceClient
            );
          } catch (error) {
            console.error(`Error processing query "${query.query_text}":`, error);
          }
        }
      }
    }

    // Queue remaining queries for background processing
    if (queueBatch.length > 0) {
      for (const query of queueBatch) {
        // Add each query to a queue for processing
        try {
          if (platform === 'both' || platform === 'chatgpt') {
            await queueQuery(
              analysisRun.id,
              query.query_text,
              query.keyword,
              query.intent,
              'chatgpt',
              client,
              formattedCompetitors,
              serviceClient
            );
          }
          
          if (platform === 'both' || platform === 'perplexity') {
            await queueQuery(
              analysisRun.id,
              query.query_text,
              query.keyword,
              query.intent,
              'perplexity',
              client,
              formattedCompetitors,
              serviceClient
            );
          }
        } catch (error) {
          console.error(`Error queuing query "${query.query_text}":`, error);
        }
      }
    }

    // Update analysis run status to running
    await serviceClient
      .from('analysis_runs')
      .update({ status: 'running' })
      .eq('id', analysisRun.id);

    // Return success in the expected format
    return new Response(
      JSON.stringify({
        success: true,
        analysis_run_id: analysisRun.id
      }),
      {
        headers: responseHeaders,
        status: 200
      }
    );

  } catch (error) {
    console.error('Custom analysis error:', error);
    
    // Always use the same response headers for errors to ensure CORS headers are sent
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message || String(error)
      }),
      {
        headers: responseHeaders,
        status: 400
      }
    );
  }
});

// Helper function to process a single query
async function processQuery(
  analysisRunId: string,
  queryText: string,
  keyword: string,
  intent: string,
  platform: string,
  client: any,
  competitors: any[],
  serviceClient: any
) {
  console.log(`Processing query: "${queryText}" for ${platform}`);
  
  // Call the process-query function
  const processResponse = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/process-query`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')}`
    },
    body: JSON.stringify({
      analysis_run_id: analysisRunId,
      query_text: queryText,
      keyword: keyword,
      query_intent: intent,
      platform,
      client: {
        id: client.id,
        name: client.name,
        domain: client.domain,
        competitors: competitors
      }
    })
  });
  
  try {
    const processResult = await processResponse.json();
    
    if (!processResult.success) {
      console.error(`Failed to process query "${queryText}":`, processResult.error);
      throw new Error(processResult.error || 'Failed to process query');
    }
    
    return processResult;
  } catch (error) {
    console.error(`Error parsing process-query response for "${queryText}":`, error);
    throw new Error(`Failed to process query: ${error.message}`);
  }
}

// Helper function to queue a query for background processing
async function queueQuery(
  analysisRunId: string,
  queryText: string,
  keyword: string,
  intent: string,
  platform: string,
  client: any,
  competitors: any[],
  serviceClient: any
) {
  console.log(`Queuing query: "${queryText}" for ${platform}`);
  
  // Add to the query queue table
  const { data, error } = await serviceClient
    .from('query_queue')
    .insert({
      analysis_run_id: analysisRunId,
      query_text: queryText,
      keyword: keyword || '',
      query_intent: intent || '',
      platform,
      client_id: client.id,
      client_name: client.name,
      client_domain: client.domain,
      competitors: competitors,
      status: 'pending',
      priority: 1,
      created_at: new Date().toISOString()
    });
  
  if (error) {
    console.error(`Failed to queue query "${queryText}":`, error);
    throw new Error(`Failed to queue query: ${error.message}`);
  }
  
  return data;
}