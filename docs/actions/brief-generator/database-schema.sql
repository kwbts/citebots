-- Content Briefs Table Schema
-- This table stores content briefs generated by the brief generator

-- Create content_briefs table
CREATE TABLE IF NOT EXISTS content_briefs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  client_id UUID NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  keywords TEXT[] NOT NULL,
  purpose TEXT NOT NULL DEFAULT 'inform',
  audience TEXT NOT NULL DEFAULT 'intermediate',
  style_guide TEXT,
  custom_instructions TEXT,
  content JSONB NOT NULL,
  status TEXT NOT NULL DEFAULT 'completed',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES auth.users(id),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_by UUID REFERENCES auth.users(id)
);

-- Add index for faster client lookups
CREATE INDEX IF NOT EXISTS idx_content_briefs_client_id ON content_briefs(client_id);

-- Add index for text search on title
CREATE INDEX IF NOT EXISTS idx_content_briefs_title ON content_briefs USING gin(to_tsvector('english', title));

-- Add index for keywords array
CREATE INDEX IF NOT EXISTS idx_content_briefs_keywords ON content_briefs USING gin(keywords);

-- Add trigger for updated_at
CREATE OR REPLACE FUNCTION update_content_briefs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_content_briefs_updated_at_trigger ON content_briefs;
CREATE TRIGGER update_content_briefs_updated_at_trigger
BEFORE UPDATE ON content_briefs
FOR EACH ROW
EXECUTE FUNCTION update_content_briefs_updated_at();

-- Add RLS policies for content_briefs
ALTER TABLE content_briefs ENABLE ROW LEVEL SECURITY;

-- Users can view their own briefs and briefs for clients they created
CREATE POLICY "Users can view content briefs they created or for clients they own"
ON content_briefs
FOR SELECT
USING (
  auth.uid() = created_by OR 
  EXISTS (
    SELECT 1 FROM clients
    WHERE clients.id = content_briefs.client_id
    AND (clients.created_by = auth.uid() OR clients.user_id = auth.uid())
  )
);

-- Users can insert briefs for clients they own
CREATE POLICY "Users can create content briefs for clients they own"
ON content_briefs
FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1 FROM clients
    WHERE clients.id = content_briefs.client_id
    AND (clients.created_by = auth.uid() OR clients.user_id = auth.uid())
  )
);

-- Users can update briefs they created
CREATE POLICY "Users can update content briefs they created"
ON content_briefs
FOR UPDATE
USING (auth.uid() = created_by)
WITH CHECK (auth.uid() = created_by);

-- Users can delete briefs they created
CREATE POLICY "Users can delete content briefs they created"
ON content_briefs
FOR DELETE
USING (auth.uid() = created_by);

-- Super admins can do everything
CREATE POLICY "Super admins can manage all content briefs"
ON content_briefs
FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM profiles
    WHERE profiles.id = auth.uid()
    AND profiles.role = 'super_admin'
  )
);

-- Create a view for content briefs with client information
CREATE OR REPLACE VIEW content_briefs_with_clients AS
SELECT 
  cb.id,
  cb.title,
  cb.keywords,
  cb.purpose,
  cb.audience,
  cb.created_at,
  cb.updated_at,
  cb.status,
  c.id AS client_id,
  c.name AS client_name,
  c.domain AS client_domain,
  c.industry_primary,
  p.email AS created_by_email,
  p.first_name AS created_by_first_name,
  p.last_name AS created_by_last_name
FROM 
  content_briefs cb
JOIN 
  clients c ON cb.client_id = c.id
LEFT JOIN 
  auth.users u ON cb.created_by = u.id
LEFT JOIN 
  profiles p ON u.id = p.id;

-- Create function to count briefs by client
CREATE OR REPLACE FUNCTION count_client_briefs(client_id UUID)
RETURNS INTEGER AS $$
  SELECT COUNT(*) FROM content_briefs WHERE client_id = $1;
$$ LANGUAGE SQL SECURITY DEFINER;

-- Grant permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON content_briefs TO authenticated;
GRANT SELECT ON content_briefs_with_clients TO authenticated;